# Coronavirus Analysis
Working directory must be Cov2_Analysis directory

## Mean and Standard Deviation
Finding mean sequence length, standard devation for length, mean gc content and standard deviation for gc content for CoV sequences.

```julia 
using BISC195Bioinformatics

mean_and_std_fasta("data/CoV_sequences.fasta")
```

## Minimum and Maximum

Finding length of smallest and largest sequence for CoV sequences. 

```julia
seq_lengths = sequence_lengths("data/CoV_sequences.fasta")

min_length = minimum(seq_lengths)
max_length = maximum(seq_lengths)

min_length, max_length
```

## Identifying Outliers

Using histogram to spot sequence length outliers in CoV sequences. Added more descriptive axis labels and removed legend.

```julia
using Plots

histogram(seq_lengths, 
    xlabel = "Sequence Length",
    ylabel = "Frequency",
    legend = false)
```
## Filtering sequences with more than 25k bases

Modifying sequence_length function from BISC195 Bioinformatics package to output new vectors only containing sequences with >25k bases.
(Also includes adjoining headers and sequence lengths in for use in next step). 

I made a new function instead of just calling the sequence_length function because sequence_length already pulls the header and sequence arrays from parse_fasta. 
This way I don't have to call parse_fasta a second time to get the original vectors for a slice. 

Function arguments must be obtained from parse_fasta function using path to fasta file. 
Moved function to BISC195Bioinformatics package for easier debugging. 

```julia
headers, sequences = parse_fasta("data/CoV_sequences.fasta")
seq_lengths = morethan25k(headers, sequences)[3] ## Obtain sequence lengths from morethan25k function
```
Making a new histogram using filtered fasta file. 

```julia
histogram(seq_lengths, 
xlabel = "Sequence Length",
ylabel = "Frequency",
legend = false)
```
## Unique Kmers

Modifying question 4 from assignment 04 to create function that takes two arguments (sequence, k) and returns all of the unique kmers of length k. 
Set has built-in function of avoiding repeat entries, so no need to check if kmer is in kmers.

Added loop to stop evaluating kmer if invalid base is encountered. 

Moved function to BISC195Bioinformatics package. 

```julia 
@doc uniquekmers

```
## Comparing Unique kmers

Calculating distance metric between two sets of kmers. Identical sets return value of 0, sets with no overlap whatsoever return 1. 

Distance metric defined as:
1 - (length of intersection / length of union)
OR 
((length of set1 - set2) + (length of set2 - set1)) / length of union

```julia
intersect_length = length(intersect(set1, set2))
union_length = length(union(set1, set2))

distancemetric = 1 - (intersect_length / union_length)
```
